#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:nil author:t
#+OPTIONS: c:nil creator:comment d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t
#+OPTIONS: tags:t tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: Org-citeproc TODO list
#+AUTHOR: Richard Lawrence
#+EMAIL: richard.lawrence@berkeley.edu
#+DESCRIPTION:
#+LANGUAGE: en
#+CREATOR: Emacs 23.4.1 (Org mode 8.3beta)
#+TAGS: bug(b) newfeature(f) refactor(r) maybe(m)
#+SEQ_TODO: TODO INPROGRESS WAITING UPSTREAM | DONE WONTFIX

* DONE Warning-free compilation					   :refactor:
  - [X] remaining warning: Cite's JSON instance is an `orphan'
    instance, because neither Cite nor JSON is defined in
    org-citeproc.hs
* INPROGRESS Correct cabal packaging				   :refactor:
  - [X] rename everything to `org-citeproc'
  - [ ] separate code into modules?
* INPROGRESS Add support for multi-cite citations		 :newfeature:
  - [X] handle common prefix and suffix
  - [X] support LaTeX-like behavior, where citation command
    distributes over each reference
    (e.g.  [cite: pre1 @Doe1999 post1; pre2 @Doe2000 post2] should
    render like: Doe (pre1 1999, post1), and Doe (pre2 2000, post2)
    rather than: Doe (pre1 1999, post1; pre2 Doe 2000 post2)
  - [X] add spaces after common-prefix and before common-suffix.  Org
    parser seems to delete these even if they appear in the source,
    but I can't see how they would be useful unless spaces are added.
    BibLateX inserts space after common prefix, comma and space
    before common suffix, in both \parencites and \textcites.
  - [ ] Internationalization or style-specific separators needed?  One
    case that definitely needs to be dealt with: with parenthetical
    multi-cites and chicago-author-date.csl, the common suffix should
    probably be separated by a semi-colon, rather than a comma, to be
    consistent with the separators between works.  This suggests we
    should pull the separator from the style if possible.
* TODO Locators and abbreviations			     :bug:newfeature:
  - [ ] Figure out why processCites does not seem to be parsing
    locators out of the suffix, or why it is not abbreviating them in
    the tests I've run so far.
* TODO Add support for linking citations to bib entries		 :newfeature:
Cf. http://article.gmane.org/gmane.emacs.orgmode/96141

Looks like Pandoc might already be able to support this if we use
Text.Pandoc.Definition.Citation rather than Text.CSL.Style.Cite?  See
processCites in Text.CSL.Pandoc

** TODO Add unique IDs to bibliography entries
** TODO Optionally wrap citations in links to corresponding entries

* TODO Add support for Zotero-style metadata		   :newfeature:maybe:
Cf. http://article.gmane.org/gmane.emacs.orgmode/96154

* INPROGRESS Fix ODT writer						:bug:
It looks like using the <text:p> tags generated by Pandoc may not be
the right approach, given that we want to insert the citation into a
larger document...the surrounding paragraph will already be wrapped in
<text:p>, and I think you can't have one such element within another.

See:
http://docs.oasis-open.org/office/v1.2/os/OpenDocument-v1.2-os-part1.html#__RefHeading__1415138_253892949
for more on what a <text:p> can validly contain.

Maybe instead a citation should be wrapped in a <text:reference-mark>?
or <text:note><text:note-citation>...?

Also, the bibliography should be formatted as a <text:bibliography>.

** TODO Look into supporting this upstream in Pandoc
   
* TODO Add support for note-based styles				:bug:
Currently, I get a crash when exporting the test document using a
note-based style (namely chicago-fullnote-bibliography-no-ibid.csl);
and even if it didn't crash, need to add support on the Org side for
placing the processed output into a footnote definition and replacing
the citation with a footnote reference.

* TODO Elisp writer?					   :newfeature:maybe:
This would be one way of making it easy for users to post-process
citations (e.g. via a filter) on the Org side.  If we can generate
Elisp that will be read as Org elements/objects, filters can
manipulate those objects, rather than worrying about parsing text in
the target format.
